#main=src${~/~}rust${~/~}data
main=src${~/~}rust${~/~}snapcgi

project=snapurl
domain=com

crate_dir=..${~/~}crates

dep_crates=[--extern, simweb]
comp opts=[]

web server home=..${~/~}TJWS${~/~}1.x

common =..${~/~}simscript${~/~}comm-build.7b:file
common env=..${~/~}simscript${~/~}java-env.7b:file

include(common);
include(common env)

target make gen {
	dependency{ eq {
           timestamp(.gen)
        }
    }
    display(Making .gen)
    mkd (.gen)
}

target gen_al {
	dependency{target(make gen)}
	dependency{anynewer(.gen${~/~}aliases.properties,src)}
	write(.gen${~/~}aliases.properties,"from=/snapurl;dir=${~cwd~}${~/~}.gen")
}

target make work dirs {
	dependency{ or {
			eq {
	           timestamp(${web server home}${~/~}.dat)
	        }
	        eq {
	           timestamp(${web server home}${~/~}.fak)
	        }
	    }
    }
    display(Making work dirs)
    if {
    	eq {
	           timestamp(${web server home}${~/~}.dat)
	       } then {
	       		mkd (${web server home}${~/~}.dat)
	       }
    }
    if {
    	eq {timestamp(${web server home}${~/~}.fak)} then {
	       		mkd (${web server home}${~/~}.fak)
	       }
    }
}

include(dep.7b)

target rand {
	dependency{target(make work dirs)}
	dependency{false}
	#display(rand)
	exec java (-cp,lib${~path_separator~}${deps},${domain}.${project}.Amazer,${web server home})
}

target deploy {
	dependency{or{anynewer(src,.gen);anynewer(bee.7b,.gen);}}
	dependency{anynewer(src${~/~}html${~/~}index.html,.gen${~/~}index.html)}
	dependency{target(build)}
	dependency{target(rand)}
	display( deploying....)
	cp(src${~/~}html${~/~}index.html,.gen)
	mkd (.gen${~/~}editor)
	cp(src${~/~}dep${~/~}nic${~/~}nicEdit.js, .gen${~/~}editor)
	cp(src${~/~}dep${~/~}nic${~/~}nicEditorIcons.gif, .gen${~/~}editor)
	cp(src${~/~}js${~/~}common.js, .gen)
	cp(src${~/~}image${~/~}favicon.ico,.gen${~/~}favicon.ico)
	cp(src${~/~}image${~/~}copy.svg,.gen${~/~}copy.svg)
 #rb
 display(${executable}-> ..${~/~}rusthub${~/~}src${~/~}rust${~/~}rustcgi)	
	cp(${executable}, ..${~/~}rusthub${~/~}src${~/~}rust${~/~}rustcgi)
}